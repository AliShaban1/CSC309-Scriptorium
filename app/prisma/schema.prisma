// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model User {
<<<<<<< HEAD
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  phoneNumber    String?
  profilePicture String?  
  templates Template[]
  reports Report[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
=======
  id               Int        @id @default(autoincrement())
  templates        Template[]
  liked            BlogPost[] @relation("likedBlogPosts")
  disliked         BlogPost[] @relation("dislikedBlogPosts")
  likedComments    Comment[]  @relation("likedComments")
  dislikedComments Comment[]  @relation("dislikedComments")
>>>>>>> 6ac310d5d3c8ec0a1e6f34d1dbc8fbe91d99da8b
}

model Template {
  id          Int        @id @default(autoincrement())
  title       String
  code        String
  language    String
  explanation String     @default("")
  tags        Tag[]      @relation("TemplateTags")
  authorID    Int
  author      User       @relation(fields: [authorID], references: [id])
  forked      Boolean    @default(false)
  forkedId    Int?
  forkedFrom  Template?  @relation("ForkRelation", fields: [forkedId], references: [id])
  forks       Template[] @relation("ForkRelation")
  blogPosts   BlogPost[] @relation("BlogPostTemplates")
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  templates Template[] @relation("TemplateTags")
  blogPosts BlogPost[] @relation("BlogPostTags")
}

model BlogPost {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  tags        Tag[]      @relation("BlogPostTags")
  authorId    Int
  comments    Comment[]
  rating      Int       @default(0) 
  hidden      Boolean   @default(false)
  reportCount Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  liked       User[]     @relation("likedBlogPosts")
  disliked    User[]     @relation("dislikedBlogPosts")
  templates   Template[] @relation("BlogPostTemplates")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  parentId  Int? // Nullable, since top-level comments donâ€™t have a parent
  post      BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  rating    Int       @default(0)
  liked     User[]    @relation("likedComments")
  disliked  User[]    @relation("dislikedComments")
  createdAt DateTime  @default(now())
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  Replies   Comment[] @relation("CommentReplies")
  hidden    Boolean   @default(false)
  reportCount Int     @default(0)
}

model Report {
  id          Int       @id @default(autoincrement())
  explanation String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  contentId   Int       //Id of reported content (BlogPost or Comment)
  contentType String    //Either post or comment
  createdAt   DateTime  @default(now())
}
